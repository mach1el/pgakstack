version: '3.7'

networks:
  traefik:
    driver: overlay
    name: traefik
    ipam:
      config:
        - subnet: "10.95.1.0/24"
  inbound:
    driver: overlay
    name: inbound
    ipam:
      config:
        - subnet: "10.95.2.0/24"

volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  traefik:
    hostname: traefik
    image: traefik:v2.2
    networks:
      - traefik
      - inbound
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    command:
      - "--api"
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--providers.docker=true"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.watch"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

  prometheus:
    hostname: prometheus
    image: prom/prometheus:latest
    networks:
      - inbound
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=730h'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN:-localhost}`)"
        - "traefik.http.routers.prometheus.service=prometheus"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        - "traefik.docker.network=inbound"

  grafana:
    hostname: grafana
    image: grafana/grafana:9.1.1
    networks:
      - inbound
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD:-grafana}
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      labels:
        - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN:-localhost}`)"
        - "traefik.http.routers.grafana.service=grafana"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.docker.network=inbound"
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  alertmanager:
    hostname: alertmanager
    image: prom/alertmanager:latest
    networks:
      - inbound
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    deploy:
      labels:
        - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.${DOMAIN:-localhost}`)"
        - "traefik.http.routers.alertmanager.service=alertmanager"
        - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
        - "traefik.docker.network=inbound"
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  karma:
    image: lmierzwa/karma:latest
    networks:
      - inbound
    environment:
      - "PORT=8989"
      - "ALERTMANAGER_URI=http://alertmanager:9093"
    deploy:
      labels:
        - "traefik.http.routers.karma.rule=Host(`karma.${DOMAIN:-localhost}`)"
        - "traefik.http.routers.karma.service=karma"
        - "traefik.http.services.karma.loadbalancer.server.port=8989"
        - "traefik.docker.network=inbound"
      mode: replicated
      replicas: 1